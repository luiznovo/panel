version: '3.8'

services:
  # Aplicação principal
  g-panel:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: g-panel:latest
    container_name: g-panel-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_PATH=/app/data/database.sqlite
      - SESSION_SECRET=${SESSION_SECRET:-change-this-secret}
      - CSRF_SECRET=${CSRF_SECRET:-change-this-csrf-secret}
      - API_RATE_LIMIT=${API_RATE_LIMIT:-100}
      - WEB_RATE_LIMIT=${WEB_RATE_LIMIT:-1000}
    volumes:
      - panel_data:/app/data
      - panel_logs:/app/logs
      - panel_backups:/app/backups
      - /etc/localtime:/etc/localtime:ro
    networks:
      - panel_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.g-panel.service=main"
      - "com.g-panel.version=1.0"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: g-panel-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - panel_network
    depends_on:
      - g-panel
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.g-panel.service=proxy"

  # Backup Service
  backup:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: g-panel:latest
    container_name: g-panel-backup
    restart: "no"
    environment:
      - NODE_ENV=production
    volumes:
      - panel_data:/app/data:ro
      - panel_backups:/app/backups
      - ./scripts:/app/scripts:ro
    networks:
      - panel_network
    command: ["/app/scripts/backup.sh"]
    profiles:
      - backup
    labels:
      - "com.g-panel.service=backup"

  # Watchtower para atualizações automáticas
  watchtower:
    image: containrrr/watchtower
    container_name: g-panel-watchtower
    restart: unless-stopped
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=300
      - WATCHTOWER_ROLLING_RESTART=true
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_LABEL_ENABLE=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - panel_network
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.g-panel.service=updater"
    profiles:
      - auto-update

networks:
  panel_network:
    driver: bridge
    name: g-panel-network
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  panel_data:
    driver: local
    name: g-panel-data
    driver_opts:
      type: none
      o: bind
      device: /opt/g-panel/data
  
  panel_logs:
    driver: local
    name: g-panel-logs
    driver_opts:
      type: none
      o: bind
      device: /opt/g-panel/logs
  
  panel_backups:
    driver: local
    name: g-panel-backups
    driver_opts:
      type: none
      o: bind
      device: /opt/g-panel/backups
  
  nginx_logs:
    driver: local
    name: g-panel-nginx-logs
    driver_opts:
      type: none
      o: bind
      device: /opt/g-panel/nginx/logs